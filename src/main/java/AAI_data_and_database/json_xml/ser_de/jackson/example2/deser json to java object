-------------------deserialize json to java object

----------we have following java object

package ch.admin.ezv.eets.declaration.domain;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.*;

import java.util.List;

@Getter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)
@ToString
public class JourneyDeclarationSummaryDto {

    private String journeyDeclarationId;

    private String predecessorId;

    private String rootDeclarationId;

    private List<JourneyDeclarationPeriodDto> periods;

    private List<JourneyDeclarationPeriodDto> originalPeriods;

    private ManualInfoDto manualInfo;

    private boolean trackEdited;

    private boolean original;

    private boolean validationsSkipped;

    private boolean rootDeclarationOriginal;

}


------and following response in json format after requesting API

{
  "journeyDeclarationId": "d752a81e-16af-4052-9c00-850437202ccf",
  "periods": [
    {
      "declarationId": 2147483647,
      "beginOfPeriod": "2022-01-01T13:00:00+01:00",
      "endOfPeriod": "2022-01-01T21:00:00+01:00",
      "dateReceived": "2022-06-03T08:19:21.749914+02:00",
      "legs": [
        {
          "vehicleData": {
            "vehicleDataId": "8a5617bd-7bb1-44a4-8b30-91b2a97e6fc6",
            "vehicleMaxLadenWeight": 1800,
            "vehicleTrainMaximumWeight": 3600,
            "vehicleWeightUnladen": 800,
            "euroValue": 5,
            "vehicleNatures": []
          },
          "trailerData": {
            "trailerType": 1,
            "trailerMaxLadenWeight": 4000
          },
          "distance": 298101,
          "startDateTime": "2022-06-03T00:19:21+02:00",
          "endDateTime": "2022-06-03T03:54:46+02:00",
          "start": {
            "stationName": "Basel-Weil Autobahn",
            "dateTime": "2022-06-03T00:49:55+02:00"
          },
          "end": {
            "stationName": "Chiasso Brogeda Autostrada",
            "dateTime": "2022-06-03T03:35:02+02:00"
          },
          "crossingPoints": [
            {
              "stationName": "Basel-Weil Autobahn",
              "dateTime": "2022-06-03T00:49:55+02:00",
              "stationNumber": 2,
              "type": "ENTRY"
            },
            {
              "stationName": "Chiasso Brogeda Autostrada",
              "dateTime": "2022-06-03T03:35:02+02:00",
              "stationNumber": 41,
              "type": "EXIT"
            },
            {
              "stationName": "Basel-Weil Autobahn",
              "dateTime": "2022-06-03T00:49:19+02:00",
              "stationNumber": 1800,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "Basel-Weil Autobahn",
              "dateTime": "2022-06-03T00:49:38+02:00",
              "stationNumber": 1800,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "BELS",
              "dateTime": "2022-06-03T01:11:49+02:00",
              "stationNumber": 12001,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "BELN",
              "dateTime": "2022-06-03T01:11:49+02:00",
              "stationNumber": 12024,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "ROTW",
              "dateTime": "2022-06-03T01:18:56+02:00",
              "stationNumber": 12013,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "GOTN",
              "dateTime": "2022-06-03T02:23:37+02:00",
              "stationNumber": 12008,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "GOTS",
              "dateTime": "2022-06-03T02:23:37+02:00",
              "stationNumber": 12009,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "BESN",
              "dateTime": "2022-06-03T03:04:19+02:00",
              "stationNumber": 12019,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "Chiasso Brogeda Merci",
              "dateTime": "2022-06-03T03:34:42+02:00",
              "stationNumber": 4181,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "Chiasso Brogeda Autostrada",
              "dateTime": "2022-06-03T03:35:16+02:00",
              "stationNumber": 4182,
              "type": "STATIONARY_CHECK"
            }
          ],
          "segments": {
            "allSegments": 2101,
            "poorSegments": 494,
            "outlierSegments": 257,
            "redundantSegments": 0,
            "invalidSegmentsLength": 0
          },
          "crossingMissed": [],
          "manual": false
        }
      ]
    }
  ],
  "originalPeriods": [
    {
      "declarationId": 2147483647,
      "beginOfPeriod": "2022-01-01T13:00:00+01:00",
      "endOfPeriod": "2022-01-01T21:00:00+01:00",
      "dateReceived": "2022-06-03T08:19:21.749914+02:00",
      "legs": [
        {
          "vehicleData": {
            "vehicleDataId": "8a5617bd-7bb1-44a4-8b30-91b2a97e6fc6",
            "vehicleMaxLadenWeight": 1800,
            "vehicleTrainMaximumWeight": 3600,
            "vehicleWeightUnladen": 800,
            "euroValue": 5,
            "vehicleNatures": []
          },
          "trailerData": {
            "trailerType": 1,
            "trailerMaxLadenWeight": 4000
          },
          "distance": 298101,
          "startDateTime": "2022-06-03T00:19:21+02:00",
          "endDateTime": "2022-06-03T03:54:46+02:00",
          "start": {
            "stationName": "Basel-Weil Autobahn",
            "dateTime": "2022-06-03T00:49:55+02:00"
          },
          "end": {
            "stationName": "Chiasso Brogeda Autostrada",
            "dateTime": "2022-06-03T03:35:02+02:00"
          },
          "crossingPoints": [
            {
              "stationName": "Basel-Weil Autobahn",
              "dateTime": "2022-06-03T00:49:55+02:00",
              "stationNumber": 2,
              "type": "ENTRY"
            },
            {
              "stationName": "Chiasso Brogeda Autostrada",
              "dateTime": "2022-06-03T03:35:02+02:00",
              "stationNumber": 41,
              "type": "EXIT"
            },
            {
              "stationName": "Basel-Weil Autobahn",
              "dateTime": "2022-06-03T00:49:19+02:00",
              "stationNumber": 1800,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "Basel-Weil Autobahn",
              "dateTime": "2022-06-03T00:49:38+02:00",
              "stationNumber": 1800,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "BELS",
              "dateTime": "2022-06-03T01:11:49+02:00",
              "stationNumber": 12001,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "BELN",
              "dateTime": "2022-06-03T01:11:49+02:00",
              "stationNumber": 12024,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "ROTW",
              "dateTime": "2022-06-03T01:18:56+02:00",
              "stationNumber": 12013,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "GOTN",
              "dateTime": "2022-06-03T02:23:37+02:00",
              "stationNumber": 12008,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "GOTS",
              "dateTime": "2022-06-03T02:23:37+02:00",
              "stationNumber": 12009,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "BESN",
              "dateTime": "2022-06-03T03:04:19+02:00",
              "stationNumber": 12019,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "Chiasso Brogeda Merci",
              "dateTime": "2022-06-03T03:34:42+02:00",
              "stationNumber": 4181,
              "type": "STATIONARY_CHECK"
            },
            {
              "stationName": "Chiasso Brogeda Autostrada",
              "dateTime": "2022-06-03T03:35:16+02:00",
              "stationNumber": 4182,
              "type": "STATIONARY_CHECK"
            }
          ],
          "segments": {
            "allSegments": 2101,
            "poorSegments": 494,
            "outlierSegments": 257,
            "redundantSegments": 0,
            "invalidSegmentsLength": 0
          },
          "crossingMissed": [],
          "manual": false
        }
      ]
    }
  ],
  "trackEdited": false,
  "original": true,
  "rootDeclarationOriginal": false,
  "validationsSkipped": false
}


-----the keys of the json nodes correspond to the field names of JourneyDeclarationSummaryDto


--------now we deserialize the json string to object of JourneyDeclarationSummaryDto using ObjectMapper of jackson and its readValue() method

package ch.admin.ezv.camiuns.testhelper;

import ch.admin.ezv.eets.RestAssuredKeycloakSpec;
import ch.admin.ezv.eets.declaration.domain.JourneyDeclarationChainElementDto;
import ch.admin.ezv.eets.declaration.domain.JourneyDeclarationStatusInfoDto;
import ch.admin.ezv.eets.declaration.domain.JourneyDeclarationSummaryDto;
import ch.admin.ezv.camiuns.testhelper.registry.UrlRegistry;
import ch.admin.ezv.eets.mockinjector.MockEventInjectorHelper;
import ch.admin.ezv.eets.providerinterface.domain.AduType;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.google.common.collect.ImmutableMap;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import lombok.experimental.UtilityClass;
import lombok.extern.slf4j.Slf4j;
import org.apache.http.HttpHeaders;
import org.awaitility.Duration;

import java.io.IOException;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import static ch.admin.ezv.camiuns.testhelper.registry.QueueRegistry.DECLARATION_ACCEPTED_TEST_QUEUE;
import static ch.admin.ezv.camiuns.testhelper.registry.QueueRegistry.DECLARATION_COMPLETE_TEST_QUEUE;
import static ch.admin.ezv.camiuns.testhelper.DomainEventHelper.getAttributeValue;
import static ch.admin.ezv.camiuns.testhelper.GenericLogger.logStep;
import static ch.admin.ezv.camiuns.testhelper.JourneyServiceHelper.sendDataSet;
import static ch.admin.ezv.camiuns.testhelper.RabbitMqHelper.waitForSingleEventToBeInQueue;
import static org.awaitility.Awaitility.await;

@UtilityClass
@Slf4j
public class DeclarationServiceHelper {

    private static ObjectMapper mapper = new ObjectMapper().
            registerModule(new JavaTimeModule()).
            findAndRegisterModules().
            disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);

    public static JourneyDeclarationSummaryDto getSummary(String journeyDeclarationId) throws IOException {
        Map<String, Object> pathParams = new HashMap<>();
        pathParams.put("journeyDeclarationId", journeyDeclarationId);

        String declarationString = RestAssured
                .given()
                .spec(RestAssuredKeycloakSpec.getAuthenticatedRequestSpec())
                .baseUri(UrlRegistry.DECLARATION_SERVICE_URL).
                        headers(ImmutableMap.of(HttpHeaders.CONTENT_TYPE, "application/json"))
                .pathParams(pathParams)
                .get("/api/declaration/{journeyDeclarationId}/summary")
                .andReturn()
                .then()
                .assertThat().statusCode(200)
                .contentType(ContentType.JSON).extract().response().body().asString();
				
        return mapper.readValue(declarationString, JourneyDeclarationSummaryDto.class);
    }
}
